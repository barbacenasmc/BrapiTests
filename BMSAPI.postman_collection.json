{
	"info": {
		"_postman_id": "6882066e-2fe4-49f1-b159-95c594947b79",
		"name": "BMSAPI - local",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "brapi-authentication-service",
			"item": [
				{
					"name": "POST /brapi/v1/token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf9362de-e5e8-48d1-8faf-847f7d31a2da",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.unset(\"masterToken\");",
									"pm.environment.set(\"masterToken\", jsonData.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"@dm1N\",\r\n  \"grant_type\": \"\",\r\n  \"client_id\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/token",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "brapi-call-services",
			"item": [
				{
					"name": "GET /brapi/v1/calls no specified format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3570823b-e7b2-441a-8fdd-23dcfa4a260a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check a study table call\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
									"});",
									"",
									"pm.test(\"Check if format of study table call is json\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[8].datatypes[0]).to.eql(\"json\");",
									"});",
									"",
									"pm.test(\"Check if format of study table call is csv\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[8].datatypes[1]).to.eql(\"tsv\");",
									"});",
									"",
									"pm.test(\"Check if format of study table call is csv\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[8].datatypes[2]).to.eql(\"csv\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/calls",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"calls"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /brapi/v1/calls csv format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3570823b-e7b2-441a-8fdd-23dcfa4a260a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Check a study table call\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
									"});",
									"",
									"pm.test(\"Check if format of samples call is csv\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].datatypes[2]).to.eql(\"csv\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/calls?datatype=csv",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"calls"
							],
							"query": [
								{
									"key": "datatype",
									"value": "csv"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /brapi/v1/calls tsv format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3570823b-e7b2-441a-8fdd-23dcfa4a260a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Check a study table call\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].call).to.eql(\"studies/{studyDbId}/table\");",
									"});",
									"",
									"pm.test(\"Check if format of samples call is tsv\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].datatypes[1]).to.eql(\"tsv\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/calls?datatype=tsv",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"calls"
							],
							"query": [
								{
									"key": "datatype",
									"value": "tsv"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /brapi/v1/calls json format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3570823b-e7b2-441a-8fdd-23dcfa4a260a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Check a study table call\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[8].call).to.eql(\"studies/{studyDbId}/table\");",
									"});",
									"",
									"",
									"pm.test(\"Check if format of samples call is tsv\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[8].datatypes[0]).to.eql(\"json\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/calls?datatype=json",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"calls"
							],
							"query": [
								{
									"key": "datatype",
									"value": "json"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "brapi-crop-services",
			"item": [
				{
					"name": "GET /brapi/v1/crops",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "44b811fa-c481-4363-a9fb-d3c085b6154f",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check brachiaria crop \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0]).to.eql(\"brachiaria\");",
									"});",
									"",
									"pm.test(\"Check chickpea crop \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[1]).to.eql(\"chickpea\");",
									"});",
									"",
									"pm.test(\"Check cowpea crop \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[2]).to.eql(\"cowpea\");",
									"});",
									"pm.test(\"Check groundnut crop \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[3]).to.eql(\"groundnut\");",
									"});",
									"pm.test(\"Check maize crop \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[4]).to.eql(\"maize\");",
									"});",
									"pm.test(\"Check rapeseed crop \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[5]).to.eql(\"rapeseed\");",
									"});",
									"pm.test(\"Check rice crop \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[6]).to.eql(\"rice\");",
									"});",
									"pm.test(\"Check sorghum crop \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[7]).to.eql(\"sorghum\");",
									"});",
									"pm.test(\"Check sorghum crop \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[8]).to.eql(\"testdata\");",
									"});",
									"pm.test(\"Check tomato crop \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[9]).to.eql(\"tomato\");",
									"});",
									"pm.test(\"Check wheat crop \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[10]).to.eql(\"wheat\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/brapi/v1/crops",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"brapi",
								"v1",
								"crops"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "brapi-germplasm-services",
			"item": [
				{
					"name": "GET /{crop}/brapi/v1/germplasm-search using germplasmDbId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea061ca1-b996-4538-8f1a-cdb6f9146910",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check GID \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
									"});",
									"",
									"pm.test(\"Check defaultDisplayName \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].defaultDisplayName).to.eql(\"CML1\");",
									"});",
									"pm.test(\"Check accessionNumber \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].accessionNumber).to.eql(\"ACCNO1\");",
									"});",
									"",
									"pm.test(\"Check germplasmName \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"CML1\");",
									"});",
									"pm.test(\"Check germplasmPUI if null \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].germplasmPUI).to.eql(null);",
									"});",
									"pm.test(\"Check pedigree\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].pedigree).to.eql(\"CML1\");",
									"});",
									"  ",
									"pm.test(\"Check germplasmSeedSource\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].germplasmSeedSource).to.eql(\"AA001\");",
									"});",
									"  ",
									"pm.test(\"Check commonCropName\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].commonCropName).to.eql(\"testdata\");",
									"});",
									"",
									"pm.test(\"Check instituteCode\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].instituteCode).to.eql(\"PROGM1\");",
									"});",
									"pm.test(\"Check instituteName\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].instituteName).to.eql(\"PROGM1\");",
									"});",
									"",
									"pm.test(\"Check biologicalStatusOfAccessionCode\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].biologicalStatusOfAccessionCode).to.equal(null)",
									"});",
									"",
									"pm.test(\"Check countryOfOriginCode\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].countryOfOriginCode).to.eql(\"ORI_COUN1\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm-search?germplasmDbId=21",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"germplasm-search"
							],
							"query": [
								{
									"key": "germplasmDbId",
									"value": "21"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /{crop}/brapi/v1/germplasm-search using germplasmName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea061ca1-b996-4538-8f1a-cdb6f9146910",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check GID \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].germplasmDbId).to.eql(\"21\");",
									"});",
									"",
									"pm.test(\"Check defaultDisplayName \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].defaultDisplayName).to.eql(\"CML1\");",
									"});",
									"pm.test(\"Check accessionNumber \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].accessionNumber).to.eql(\"ACCNO1\");",
									"});",
									"",
									"pm.test(\"Check germplasmName \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].germplasmName).to.eql(\"CML1\");",
									"});",
									"pm.test(\"Check germplasmPUI if null \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].germplasmPUI).to.eql(null);",
									"});",
									"pm.test(\"Check pedigree\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].pedigree).to.eql(\"CML1\");",
									"});",
									"  ",
									"pm.test(\"Check germplasmSeedSource\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].germplasmSeedSource).to.eql(\"AA001\");",
									"});",
									"  ",
									"pm.test(\"Check commonCropName\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].commonCropName).to.eql(\"testdata\");",
									"});",
									"",
									"pm.test(\"Check instituteCode\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].instituteCode).to.eql(\"PROGM1\");",
									"});",
									"pm.test(\"Check instituteName\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].instituteName).to.eql(\"PROGM1\");",
									"});",
									"",
									"pm.test(\"Check biologicalStatusOfAccessionCode\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].biologicalStatusOfAccessionCode).to.equal(null)",
									"});",
									"",
									"pm.test(\"Check countryOfOriginCode\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].countryOfOriginCode).to.eql(\"ORI_COUN1\");",
									"});",
									"",
									"pm.test(\"Check genus\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].genus).to.eql(\"GENUS1\");",
									"});",
									"",
									"pm.test(\"Check species\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].species).to.eql(\"SPNAM1\");",
									"});",
									"",
									"pm.test(\"Check speciesAuthority\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].speciesAuthority).to.eql(\"SPAUTH1\");",
									"});",
									"",
									"pm.test(\"Check subtaxa\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].subtaxa).to.eql(\"SUBTAX1\");",
									"});",
									"",
									"pm.test(\"Check acquisitionDate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].acquisitionDate).to.eql(\"2018-10-25\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm-search?germplasmName=CML1",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"germplasm-search"
							],
							"query": [
								{
									"key": "germplasmName",
									"value": "CML1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /{crop}/brapi/v1/germplasm/{germplasmDbId} existing GID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f9346a0-b501-47af-b8d6-12717eeb22f8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check GID \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.germplasmDbId).to.eql(\"21\");",
									"});",
									"",
									"pm.test(\"Check defaultDisplayName \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"CML1\");",
									"});",
									"pm.test(\"Check accessionNumber \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.accessionNumber).to.eql(\"ACCNO1\");",
									"});",
									"",
									"pm.test(\"Check germplasmName \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.germplasmName).to.eql(\"CML1\");",
									"});",
									"pm.test(\"Check germplasmPUI if null \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.germplasmPUI).to.eql(null);",
									"});",
									"pm.test(\"Check pedigree\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.pedigree).to.eql(\"CML1\");",
									"});",
									"  ",
									"pm.test(\"Check germplasmSeedSource\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.germplasmSeedSource).to.eql(\"AA001\");",
									"});",
									"  ",
									"pm.test(\"Check commonCropName\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.commonCropName).to.eql(\"testdata\");",
									"});",
									"",
									"pm.test(\"Check instituteCode\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.instituteCode).to.eql(\"PROGM1\");",
									"});",
									"pm.test(\"Check instituteName\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.instituteName).to.eql(\"PROGM1\");",
									"});",
									"",
									"pm.test(\"Check biologicalStatusOfAccessionCode\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.biologicalStatusOfAccessionCode).to.equal(null)",
									"});",
									"",
									"pm.test(\"Check countryOfOriginCode\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.countryOfOriginCode).to.eql(\"ORI_COUN1\");",
									"});",
									"",
									"pm.test(\"Check genus\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.genus).to.eql(\"GENUS1\");",
									"});",
									"",
									"pm.test(\"Check species\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.species).to.eql(\"SPNAM1\");",
									"});",
									"",
									"pm.test(\"Check speciesAuthority\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.speciesAuthority).to.eql(\"SPAUTH1\");",
									"});",
									"",
									"pm.test(\"Check subtaxa\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.subtaxa).to.eql(\"SUBTAX1\");",
									"});",
									"",
									"pm.test(\"Check acquisitionDate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.acquisitionDate).to.eql(\"2018-10-25\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{germplasmDbId}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"germplasm",
								"{{germplasmDbId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /{crop}/brapi/v1/germplasm/{germplasmDbId} non-existing GID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a72ae4a8-dd71-4e7e-92f8-d6d0b0fb714d",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response message is no germplasm found \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.status.message).to.eql(\"no germplasm found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{nonExistingGID}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"germplasm",
								"{{nonExistingGID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /{crop}/brapi/v1/germplasm/{germplasmDbId}/pedigree",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a72ae4a8-dd71-4e7e-92f8-d6d0b0fb714d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check germplasmDbId \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.germplasmDbId).to.eql(41);",
									"});",
									"pm.test(\"Check defaultDisplayName \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.defaultDisplayName).to.eql(\"IB1\");",
									"});",
									"pm.test(\"Check pedigree \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.pedigree).to.eql(\"IB1\");",
									"});",
									"pm.test(\"Check crossingPlan \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.crossingPlan).to.eql(\"Single cross\");",
									"});",
									"pm.test(\"Check crossingYear \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.crossingYear).to.eql(2018);",
									"});",
									"pm.test(\"Check familyCode \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.familyCode).to.equal(null);",
									"});",
									"pm.test(\"Check parent1DbId \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.parent1DbId).to.eql(21);",
									"});",
									"",
									"pm.test(\"Check parent1Name \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.parent1Name).to.eql(\"CML1\");",
									"});",
									"pm.test(\"Check parent1Type \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.parent1Type).to.eql(\"FEMALE\");",
									"});",
									"",
									"pm.test(\"Check parent2DbId \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.parent2DbId).to.eql(26);",
									"});",
									"",
									"pm.test(\"Check parent2Name \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.parent2Name).to.eql(\"CML6\");",
									"});",
									"pm.test(\"Check parent2Type \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.parent2Type).to.eql(\"MALE\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{crossGID}}/pedigree",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"germplasm",
								"{{crossGID}}",
								"pedigree"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /{crop}/brapi/v1/germplasm/{germplasmDbId}/pedigree non-existing GID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a72ae4a8-dd71-4e7e-92f8-d6d0b0fb714d",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response message is no germplasm found \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.status.message).to.eql(\"no germplasm found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/germplasm/{{nonExistingGID}}/pedigree",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"germplasm",
								"{{nonExistingGID}}",
								"pedigree"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "brapi-location-services",
			"item": [
				{
					"name": "GET /{crop}/brapi/v1/locations crop name only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da810de3-469b-4627-8f22-cb9ad3d22afe",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check total results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(5069);",
									"});",
									"",
									"pm.test(\"Check a country location\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[1].name).to.eql(\"Afghanistan\") &&",
									"    pm.expect(jsonData.result.data[1].locationType).to.eql(\"Country\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /{crop}/brapi/v1/locations with pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da810de3-469b-4627-8f22-cb9ad3d22afe",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check current page\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.pagination.currentPage).to.eql(0)",
									"});",
									"",
									"pm.test(\"Check pageSize\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.pagination.pageSize).to.eql(100)",
									"});",
									"",
									"pm.test(\"Check total results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.metadata.pagination.totalCount).to.eql(5069);",
									"});",
									"",
									"pm.test(\"Check a country location\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[1].name).to.eql(\"Afghanistan\") &&",
									"    pm.expect(jsonData.result.data[1].locationType).to.eql(\"Country\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations?page=0&pageSize=100",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"locations"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "pageSize",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /{crop}/brapi/v1/locations with location type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da810de3-469b-4627-8f22-cb9ad3d22afe",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check location type of first result item\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].locationType).to.eql(\"Breeding Location\")",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/locations?locationType=breeding location",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"locations"
							],
							"query": [
								{
									"key": "locationType",
									"value": "breeding location"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "brapi-program-services",
			"item": [
				{
					"name": "GET /{crop}/brapi/v1/programs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8569a9e-5224-46c7-a717-f4fba4827191",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check programDbId\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
									"});",
									"pm.test(\"Check programName\",function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].name).to.eql(\"API Program\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"programs"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /{crop}/brapi/v1/programs json format only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8569a9e-5224-46c7-a717-f4fba4827191",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check programDbId\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
									"});",
									"pm.test(\"Check programName\",function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].name).to.eql(\"API Program\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"programs"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /{crop}/brapi/v1/programs csv format only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8569a9e-5224-46c7-a717-f4fba4827191",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check programDbId\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
									"});",
									"pm.test(\"Check programName\",function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].name).to.eql(\"API Program\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"programs"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /{crop}/brapi/v1/programs tsv format only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8569a9e-5224-46c7-a717-f4fba4827191",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check programDbId\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].programDbId).to.eql(\"c9e335d2-3057-4958-a43e-e38cf61d09ca\");",
									"});",
									"pm.test(\"Check programName\",function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data[0].name).to.eql(\"API Program\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{masterToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/{{crop}}/brapi/v1/programs",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"{{crop}}",
								"brapi",
								"v1",
								"programs"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "study-services",
			"item": [
				{
					"name": "GET /study/{cropname}/{studyId}/observations",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/bmsapi/study/{{crop}}/{{studyId}}/observations?instanceId=623",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"bmsapi",
								"study",
								"{{crop}}",
								"{{studyId}}",
								"observations"
							],
							"query": [
								{
									"key": "instanceId",
									"value": "623"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "dataset-services",
			"item": [
				{
					"name": "HEAD /crops/{crop}/{studyId}/datasets/{datasetId}/variables/observations non-existing studyID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89069dcf-9985-4e37-9a85-905ab83b7bef",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/studies/{{nonExistingGID}}/datasets/{{datasetId}}/variables/observations?variableIds=100162",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"studies",
								"{{nonExistingGID}}",
								"datasets",
								"{{datasetId}}",
								"variables",
								"observations"
							],
							"query": [
								{
									"key": "variableIds",
									"value": "100162"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ccbc022e-2d93-4126-990a-69e998e5908e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"X-Total-Count is correct\", function () {",
									"    pm.response.to.be.header(\"X-Total-Count\", \"20\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/studies/{{studyId}}/datasets/{{datasetId}}/variables/observations?variableIds={{variableId1}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"studies",
								"{{studyId}}",
								"datasets",
								"{{datasetId}}",
								"variables",
								"observations"
							],
							"query": [
								{
									"key": "variableIds",
									"value": "{{variableId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HEAD /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables/observations multiple variableIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89069dcf-9985-4e37-9a85-905ab83b7bef",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"X-Total-Count is correct\", function () {",
									"    pm.response.to.be.header(\"X-Total-Count\", \"60\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/studies/{{studyId}}/datasets/{{datasetId}}/variables/observations?variableIds={{variableId1}},{{variableId2}},{{variableId3}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"studies",
								"{{studyId}}",
								"datasets",
								"{{datasetId}}",
								"variables",
								"observations"
							],
							"query": [
								{
									"key": "variableIds",
									"value": "{{variableId1}},{{variableId2}},{{variableId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET/{crop}/studies/{studyId}/datasets/{datasetId}  using env datasetId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e37ce7ea-e131-45f2-b8b4-1f957fe374a8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Other assertions to follow"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSUrl}}/bmsapi/crops/{{crop}}/studies/{{studyId}}/datasets/{{env_datasetId}}",
							"host": [
								"{{BMSUrl}}"
							],
							"path": [
								"bmsapi",
								"crops",
								"{{crop}}",
								"studies",
								"{{studyId}}",
								"datasets",
								"{{env_datasetId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET/{crop}/studies/{studyId}/datasets/{datasetId}  using plot datasetId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e37ce7ea-e131-45f2-b8b4-1f957fe374a8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Other assertions to follow"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSUrl}}/bmsapi/crops/{{crop}}/studies/{{studyId}}/datasets/{{plot_datasetId}}",
							"host": [
								"{{BMSUrl}}"
							],
							"path": [
								"bmsapi",
								"crops",
								"{{crop}}",
								"studies",
								"{{studyId}}",
								"datasets",
								"{{plot_datasetId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET/{crop}/studies/{studyId}/datasets/{datasetId}  using subobs datasetId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e37ce7ea-e131-45f2-b8b4-1f957fe374a8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Other assertions to follow"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSUrl}}/bmsapi/crops/{{crop}}/studies/{{studyId}}/datasets/{{subobs_datasetId}}",
							"host": [
								"{{BMSUrl}}"
							],
							"path": [
								"bmsapi",
								"crops",
								"{{crop}}",
								"studies",
								"{{studyId}}",
								"datasets",
								"{{subobs_datasetId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET/{crop}/studies/{studyId}/datasets/{datasetId}  using means datasetId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e37ce7ea-e131-45f2-b8b4-1f957fe374a8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Other assertions to follow"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSUrl}}/bmsapi/crops/{{crop}}/studies/{{studyId}}/datasets/{{means_datasetId}}",
							"host": [
								"{{BMSUrl}}"
							],
							"path": [
								"bmsapi",
								"crops",
								"{{crop}}",
								"studies",
								"{{studyId}}",
								"datasets",
								"{{means_datasetId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables pass with associated and a non-associated variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3cde24b-ab0a-4b78-af7a-5826abbb84c7",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(\"Variable with id \"+{{nonExistingGID}} +\" is not a variable of dataset.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/studies/{{studyId}}/datasets/{{subobs_datasetId}}/variables?variableIds={{variableId1}},{{not_associated_varId}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"studies",
								"{{studyId}}",
								"datasets",
								"{{subobs_datasetId}}",
								"variables"
							],
							"query": [
								{
									"key": "variableIds",
									"value": "{{variableId1}},{{not_associated_varId}}"
								}
							]
						},
						"description": "Verify if error was returned when trying to remove a variable that is not associated with a dataset"
					},
					"response": []
				},
				{
					"name": "DELETE /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables with valid parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3cde24b-ab0a-4b78-af7a-5826abbb84c7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/crops/{{crop}}/studies/{{studyId}}/datasets/{{subobs_datasetId}}/variables?variableIds={{variableId1}},{{variableId2}}",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crops",
								"{{crop}}",
								"studies",
								"{{studyId}}",
								"datasets",
								"{{subobs_datasetId}}",
								"variables"
							],
							"query": [
								{
									"key": "variableIds",
									"value": "{{variableId1}},{{variableId2}}"
								}
							]
						},
						"description": "Verify response when deleted variable from a subobs dataset with correct parameters"
					},
					"response": []
				},
				{
					"name": "PUT /crops/{crop}/studies/{studyId}/datasets/{datasetId}/variables",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Auth-Token",
								"type": "text",
								"value": "{{masterToken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"variableTypeId\": 1808,\r\n  \"variableId\": {{variableId1}},\r\n  \"studyAlias\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{BMSurl}}/bmsapi/crops/{{crop}}/studies/{{studyId}}/datasets/{{subobs_datasetId}}/variables",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"bmsapi",
								"crops",
								"{{crop}}",
								"studies",
								"{{studyId}}",
								"datasets",
								"{{subobs_datasetId}}",
								"variables"
							]
						},
						"description": "Verify if user add variable to an existing sub-observation dataset"
					},
					"response": []
				}
			]
		},
		{
			"name": "crop-resource",
			"item": [
				{
					"name": "GET /crop/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0166ded3-e1c4-46b5-975e-0ac2c4c69240",
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check brachiaria crop \", function() {",
									"    pm.expect(pm.response.text()).to.include(\"brachiaria\");",
									"});",
									"",
									"pm.test(\"Check chickpea crop \", function() {",
									"    pm.expect(pm.response.text()).to.include(\"chickpea\");",
									"});",
									"",
									"pm.test(\"Check cowpea crop \", function() {",
									"    pm.expect(pm.response.text()).to.include(\"cowpea\");",
									"});",
									"",
									"pm.test(\"Check groundnut crop \", function() {",
									"    pm.expect(pm.response.text()).to.include(\"groundnut\");",
									"});",
									"",
									"pm.test(\"Check maize crop \", function() {",
									"    pm.expect(pm.response.text()).to.include(\"maize\");",
									"});",
									"",
									"pm.test(\"Check rapeseed crop \", function() {",
									"    pm.expect(pm.response.text()).to.include(\"rapeseed\");",
									"});",
									"pm.test(\"Check rice crop \", function() {",
									"    pm.expect(pm.response.text()).to.include(\"rice\");",
									"});",
									"pm.test(\"Check sorghum crop \", function() {",
									"    pm.expect(pm.response.text()).to.include(\"sorghum\");",
									"});",
									"",
									"pm.test(\"Check tomato crop \", function() {",
									"    pm.expect(pm.response.text()).to.include(\"tomato\");",
									"});",
									"",
									"pm.test(\"Check testdata crop \", function() {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"crop\"));",
									"});",
									"",
									"pm.test(\"Check wheat crop \", function() {",
									"    pm.expect(pm.response.text()).to.include(\"wheat\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/crop/list",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"crop",
								"list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "germplasm-list-services",
			"item": [
				{
					"name": "GET /germplasmList/{cropname}/{listId} existing listId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4253f6b8-4cff-47bf-9d45-21c1461bc12b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check list ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.listId).to.eql(JSON.parse(pm.environment.get(\"listId\")));",
									"});",
									"",
									"pm.test(\"Check list name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.listName).to.eql(\"Germplasm List 0001\");",
									"});",
									"",
									"pm.test(\"Check list description\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(\"List with nametypes and attributes\");",
									"});",
									"",
									"pm.test(\"Check list size\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.listSize).to.eql(20);",
									"});",
									"",
									"pm.test(\"Check details of the first germplasm entry\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.germplasmEntries[0].gid).to.eql(21);",
									"    pm.expect(jsonData.germplasmEntries[0].designation).to.eql(\"GP1\");",
									"    pm.expect(jsonData.germplasmEntries[0].seedSource).to.eql(\"AA001\");",
									"    pm.expect(jsonData.germplasmEntries[0].entryCode).to.eql(\"1\");",
									"    pm.expect(jsonData.germplasmEntries[0].cross).to.eql(\"A1/B1\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/germplasmList/{{crop}}/{{listId}}?",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"germplasmList",
								"{{crop}}",
								"{{listId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /germplasmList/{cropname}/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef0d628c-61ee-4f17-826a-ab1234039acf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check a list id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].listId).to.eql(JSON.parse(pm.environment.get(\"listId\")));",
									"});",
									"",
									"pm.test(\"Check a list name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].listName).to.eql(\"Germplasm List 0001\");",
									"});",
									"",
									"pm.test(\"Check a list description\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].description).to.eql(\"List with nametypes and attributes\");",
									"});",
									"",
									"pm.test(\"Check a list notes\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].notes).to.eql(\"For API tests\");",
									"});",
									"",
									"pm.test(\"Check a list size\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].listSize).to.eql(20);",
									"});",
									"",
									"pm.test(\"Check a listDetailsUrl\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].listDetailsUrl).to.eql((pm.environment.get(\"BMSurl\"))+ (\"/germplasmList/\")+(pm.environment.get(\"crop\"))+\"/\"+(pm.environment.get(\"listId\")));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/germplasmList/{{crop}}/list?",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"germplasmList",
								"{{crop}}",
								"list"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /germplasmList/{cropname}/search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc5f6389-9f54-43c4-9710-ad0c32c67240",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check a list id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].listId).to.eql(JSON.parse(pm.environment.get(\"listId\")));",
									"});",
									"",
									"pm.test(\"Check a list name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].listName).to.eql(\"Germplasm List 0001\");",
									"});",
									"",
									"pm.test(\"Check a list description\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].description).to.eql(\"List with nametypes and attributes\");",
									"});",
									"",
									"pm.test(\"Check a list notes\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].notes).to.eql(\"For API tests\");",
									"});",
									"",
									"pm.test(\"Check a list size\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].listSize).to.eql(20);",
									"});",
									"",
									"pm.test(\"Check a listDetailsUrl\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].listDetailsUrl).to.eql((pm.environment.get(\"BMSurl\"))+ (\"/germplasmList/\")+(pm.environment.get(\"crop\"))+\"/\"+(pm.environment.get(\"listId\")));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/germplasmList/{{crop}}/search?q=germplasm",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"germplasmList",
								"{{crop}}",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "germplasm"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "role-resource",
			"item": [
				{
					"name": "GET /roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "917ad11e-49b1-4121-be56-b8457136cb77",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check Admin role\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(1);",
									"    pm.expect(jsonData[0].description).to.eql(\"Admin\");",
									"});",
									"",
									"pm.test(\"Check Breeder role\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].id).to.eql(2);",
									"    pm.expect(jsonData[1].description).to.eql(\"Breeder\");",
									"});",
									"",
									"pm.test(\"Check Readonly role\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[2].id).to.eql(4);",
									"    pm.expect(jsonData[2].description).to.eql(\"Readonly\");",
									"});",
									"",
									"pm.test(\"Check SuperAdmin role\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[3].id).to.eql(5);",
									"    pm.expect(jsonData[3].description).to.eql(\"SuperAdmin\");",
									"});",
									"",
									"pm.test(\"Check Technician role\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[4].id).to.eql(3);",
									"    pm.expect(jsonData[4].description).to.eql(\"Technician\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/roles",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /roles/assignable",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "917ad11e-49b1-4121-be56-b8457136cb77",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check Admin role\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(1);",
									"    pm.expect(jsonData[0].description).to.eql(\"Admin\");",
									"});",
									"",
									"pm.test(\"Check Breeder role\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].id).to.eql(2);",
									"    pm.expect(jsonData[1].description).to.eql(\"Breeder\");",
									"});",
									"",
									"pm.test(\"Check Readonly role\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[2].id).to.eql(4);",
									"    pm.expect(jsonData[2].description).to.eql(\"Readonly\");",
									"});",
									"",
									"pm.test(\"Check Technician role\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[3].id).to.eql(3);",
									"    pm.expect(jsonData[3].description).to.eql(\"Technician\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/roles/assignable",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"roles",
								"assignable"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ontology-method-service",
			"item": [
				{
					"name": "GET /ontology/{cropname}/methods",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f49ea9c-e0c7-40eb-9a84-3e6d635d6c4e",
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{masterToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BMSurl}}/ontology/{{crop}}/methods",
							"host": [
								"{{BMSurl}}"
							],
							"path": [
								"ontology",
								"{{crop}}",
								"methods"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "691de698-5868-4ff3-b954-83c983525579",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "819cd631-95d2-4253-bf91-08853b56a5ca",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}